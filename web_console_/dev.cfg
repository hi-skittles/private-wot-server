[global]
# This is where all of your settings go for your production environment.
# You'll copy this file over to your production server and provide it
# as a command-line option to your start script.
# Settings that are the same for both development and production
# (such as template engine, encodings, etc.) all go in
# web_console/config/app.cfg

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ DATABASE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# BigWorld Note: The line below is an automatically generated database
# URI. Do not remove it or alter it unless you know what you are doing.
sqlobject.dburi="sqlite:///var/lib/bigworld/web_console/web_console.sqlite"

# if you are using a database or table type without transactions
# (MySQL default, for example), you should turn off transactions
# by prepending notrans_ on the uri
# sqlobject.dburi="notrans_mysql://username:password@hostname:port/databasename?charset=utf8"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Server ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

server.environment="production"
server.socket_port=8080
autoreload.on = False
autoreload.package=""
log_debug_info_filter.on = True

# Sets the number of threads the server uses
server.thread_pool = 50

# if this is part of a larger site, you can set the path
# to the TurboGears instance here
# server.webpath=""

# Set to True if you'd like to abort execution if a controller gets an
# unexpected parameter. False by default
tg.strict_parameters = True

tg.defaultview = "kid"

# Set to True to start scheduler to perform regular tasks
tg.scheduler = True

server.log_to_screen = True


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BigWorld ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# enable Spaces module (includes SpaceViewer tool); default True
web_console.spaces.on = True

# enable new HTML5-based Graphs module; default False (in development)
web_console.graphs.on = False

# enable old flash-based Graphs module; default True (for now)
web_console.old_graphs.on = True

# show HTTP API docs in WebConsole (default: False)
web_console.http_api.on = True

# show Profiler module in WebConsole (default: True)
web_console.profiler.on = True

# Use a specific machine for running consolidate_dbs/sync_db/clear_auto_load.
# If not set, a machine that is configured to be able to run DBApp will be selected.
# Note that machine given must have appropriate permissions to connect to DBApp's DB
# web_console.cluster.consolidate_dbs.prefered_machine = "sgi02"

# Hostname of a machine running the graphite-web service (for StatLogger)
# note: host must be given as form 'http://HOST:PORT'
# web_console.graphs.graphite_host = 'http://your_carbon_server:80'

# Web Console profiling dumps
# WARNING: setting dump_time to a large figure will result in the creation of
# very large files. Depending on usage and the number of threads available
# (above), expect at least 10-25 megabytes per second. Note that Chrome takes a
# very long time to load files greater than 100MB and may crash when loading
# large trace files ( > 400MB ).
# web_console.bw_profile.dump_time = 15 # seconds
# web_console.bw_profile.dump_dir = "/var/lib/bigworld/web_console/self_profiling"

# Web Console User Feedback
# To set multiple email addresses, use the following form...
#  "feedback@domain1.net;feedback@domain2.net"
# web_console.user_feedback.enabled = True
# web_console.user_feedback.to_addresses = "feedback@domain.net"
# web_console.user_feedback.smtp_host = "localhost"
# web_console.user_feedback.smtp_port = 25
# web_console.user_feedback.from_address = "feedback@smtp_host.smtp_domain.net"
# web_console.user_feedback.auth_login = "smtp_login" # optional
# web_console.user_feedback.auth_password = "smtp_password" # optional

# stat_logger preference file to use with StatGrapher, relative to web_console
stat_logger.preferences = "/etc/bigworld/stat_logger.xml"

# Analytics logging of WebConsole requests & system information (default
# False)
# web_console.analytics.on = False
# web_console.analytics.carbon_host = "your_carbon_host"
# web_console.analytics.carbon_port = 2004
# The process stats cache timeout can be increased to reduce the number of file
# accesses to /proc. This should not be increased beyond the shortest carbon
# aggregation interval for WebConsole metrics.
# web_console.analytics.stat_cache_timeout = 1 # seconds

# The maximum log lines that could be updated during each poll of live output
# of log viewer. It takes time to query out the new logs, send them from
# WebConsole to browser and display them in browser. If this speed is slower
# than the server log generation, the backend logs will accumulate and the size
# and time will increase in each update. Eventually the backend asynchronized
# query task would time out with this "Terminating task <> during update() due
# to poll timeout (10.0s)" in WebConsole log. To keep the live output updating
# without timeout, we have to limit the log lines transferred to browser during
# each update(poll) and discard the extra ones. 5000 is chosen based our
# internal testing. If timeout still happens, this should be further decreased.
# web_console.log_max_poll_lines = 5000

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Upload  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The upload directory for json dump of profiler
# If you change the value of this, please do remember to change the value of
# static_filter.dir of below [/uploads] to the same as well. Otherwise, the
# view JSON dumps function will not be able to work.
web_console.upload_directory = "/var/lib/bigworld/web_console/uploads"

# The maximum days that one uploaded file under web_console.upload_directory
# could be kept. Files under this directory older than this value will be
# deleted
web_console.upload_dir_max_days = 30

# The maximum size of the entire upload directory. When this limit is exceeded,
# files will be deleted ( oldest first ) until the size is less than this limit.
# The unit is Megabytes
web_console.upload_dir_max_size = 2048

# When the task to delete expired uploaded files should be run everyday
# web_console.upload_dir_clean_time = "24HH:MM:SS"
web_console.upload_dir_clean_time = "01:00:00"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ JSON ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# allow any exposed method to return JSON
tg.allow_json = True

# prevent tg_flash being added to json
tg.empty_flash = False

# pretty-print JSON. be sure to disable this in production as the performance
# impact is non-trivial.
# json.indent = 4
# json.sort_keys = True


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Authentication ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

identity.on=True
identity.failure_url="/accessdenied"

# Use BigWorld customized identity provider
identity.provider = "web_console.common.bw_identity_provider.BwIdentityProvider"

identity.soprovider.model.user="web_console.common.model.User"
identity.soprovider.model.group="web_console.common.model.Group"
identity.soprovider.model.permission="web_console.common.model.Permission"

identity.form.user_name="login_username"
identity.form.password="login_password"
identity.form.submit="login_submit"
identity.source = 'form,http_auth,visit'

# Allow basic http authentication (including curl login with -u user:password)
identity.http_basic_auth = True

# Encrypt passwords with MD5
identity.soprovider.encryption_algorithm="md5"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ LDAP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The authentication method on user log in, value could be "local" or "ldap"
# "local" means storing user password in WebConsole database when creating a new
# user and authenticating user's credentials against the information stored in
# WebConsole database when user logs in
# "ldap" means searching user information from LDAP server when creating a new
# user, and authenticating user's credentials with LDAP server when user logs in
# so no user password is required to store in WebConsole database
# If this is set to "ldap", make sure to configure all the LDAP settings below
identity.auth_method = "local"

# The address of the LDAP server, can be host name or IP address
#identity.soldapprovider.host = "127.0.0.1"

# The port that the LDAP service is listening on
#identity.soldapprovider.port = 389

# Time limit on waiting for a network response
#identity.soldapprovider.network_time_out = 30

# The time, in seconds, to wait for a response from a search operation
#identity.soldapprovider.time_out = 60

# Whether to use TLS when connecting to LDAP server. The value could be "never",
# "try", "always". "never" means never use TLS when connecting to TLS. "try"
# means to try TLS first and use normal connection if it fails. "always" means
# TLS must be used in every connection to LDAP server. You must make sure that
# the LDAP server supports TLS if you set this to "always"
#identity.soldapprovider.use_tls = "never"

# Whether allow invalid TLS certificate when connecting to LDAP server via TLS
#identity.soldapprovider.allow_invalid_tls_cert = True

# Whether to use DIGEST-MD5 SASL authentication method. To set this to true, you
# must make sure that the LDAP server supports DIGEST-MD5 SASL and the value of
# user_dn can only be plain username without domain part
#identity.soldapprovider.use_sasl_digest_md5 = True

# The distinguished name of the user that WebConsole will use to query LDAP user
# information, such as domain_name\user_name. Make sure that this account has
# the privilege to search accounts from LDAP server
#identity.soldapprovider.user_dn = "domain_name\user_name"

# The password of above account
#identity.soldapprovider.user_password = "xxxxxxxx"

# The base DN under which users to login WebConsole are located
#identity.soldapprovider.basedn = "DC=example,DC=com"

# This is the name of the class used for the LDAP user object. Example:
#identity.soldapprovider.userObjectClass = "person"

# The attribute field to use when identifying the login user on LDAP server
#identity.soldapprovider.loginUserNameAttr = "sAMAccountName"

# The attribute field to use as the server user name
#identity.soldapprovider.serverUserNameAttr = "sAMAccountName"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Authorisation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
web_console.authorisation.on = True

# config file that defines groups and their respective permissions
web_console.authorisation.config = 'users.json'

# the group (name) which has all permissions defined (but not necessarily granted)
web_console.authorisation.all_rights_group = 'admin'

# the group (name) into which users will be placed if they do not already have a
# group defined. also used as the default group choice when creating new users.
web_console.authorisation.default_group = 'modify_all'


## session ID cookies
#
# IMPORTANT:
# turbogears `visit.timeout` does not or no longer sets the expiry
# date of session cookies correctly. The session cookies set by cherrypy however,
# do work correctly, and so we explicitly use the same cookie name for both so
# that session cookies are expired corrected after time, and also so that the
# user's login session has the same lifetime as the cherrypy session
# (note: as of time of writing, no WC functionality uses cherry session variables).
#
# The end effect of this config should be that WC uses 1 session cookie, named
# 'session_id', and any/all (cherrypy) session data expires when it expires.
#
visit.on = True
visit.source = 'form, cookie'
visit.cookie.name = 'session_id'
visit.form.name = 'session_id'

# Enable cherrypy sessions. Note same cookie name as visit config.
# Timeout value is in minutes, 10080 == 1 week.
session_filter.on = True
session_filter.cookie_name = 'session_id'
session_filter.timeout = 10080

# see notes above. `session_filter.timeout` takes precendence over this value, but
# we set it to the same value just in case.
visit.timeout = 10080

# The name of the VisitManager plugin to use for visitor tracking.
visit.manager="sqlobject"

# Database class to use for visit tracking
visit.soprovider.model = "web_console.common.model.Visit"


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Logging configuration generally follows the style of the standard
# Python logging module configuration. Note that when specifying
# log format messages, you need to use *() for formatting variables.
# Deployment independent log configuration is in web_console/config/log.cfg
[logging]

[[loggers]]
[[[allinfo]]]
level='WARNING'
handlers=['debug_out']

[[[web_console]]]
level='INFO'
qualname='web_console'
handlers=['debug_out']
propagate=0

[[[pycommon]]]
level='WARNING'
qualname='pycommon'
handlers=['debug_out']
propagate=0

[[[cherrypy]]]
level='INFO'
qualname='cherrypy'
handlers=['debug_out']
propagate=0

# access log
[[[access]]]
level='INFO'
qualname='turbogears.access'
handlers=['access_out']
propagate=0

#~~~~~~~~~~~~~~~~~~~~~~~~~~ Path-specific configuration ~~~~~~~~~~~~~~~~~~~~~~~~~~~

[/login]
web_console.authorisation.on = False

[/logout]
web_console.authorisation.on = False

[/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../common/static"

[/static/font]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../common/static/font"
static_filter.content_types = {'woff': 'application/x-font-woff'}

[/statg/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../stat_grapher/static"

[/graphs/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../graphs/static"

[/log/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../log_viewer/static"

[/cc/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../cluster_control/static"

[/watchers/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../watchers/static"

[/commands/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../commands/static"

[/console/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../console/static"

[/sv/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../space_viewer/static"

[/sv/resources]
# prevent any auth-related redirection of URLs under this tree as they are
# reverse-proxied to serviceapps
web_console.authorisation.propagateUser = False

[/ss/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../service_status/static"

[/api/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../api/static"

[/uploads]
static_filter.on = True
static_filter.dir = "/var/lib/bigworld/web_console/uploads"

[/profiler/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../profiler/static"

[/profiler/upload]
# prevent any auth-related redirection for this URL, refer to BWT-23974
web_console.authorisation.propagateUser = False

[/admin/static]
static_filter.on = True
static_filter.dir = "%(top_level_dir)s/../admin/static"

[/favicon.ico]
static_filter.on = True
static_filter.file = "%(top_level_dir)s/../common/static/images/favicon.ico"
